{"version":3,"file":"static/js/959.c4fbc9a9.chunk.js","mappings":"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","sources":["components/Container/Container.jsx","components/NoInfo/NoInfo.styled.jsx","components/ActorsList/ActorsList.jsx","components/ActorsList/ActorList.styled.jsx","pages/Cast/Cast.jsx","services/fetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n\n  padding-top: ${props => props.theme.space[4]}px;\n  padding-bottom: ${props => props.theme.space[5]}px;\n  padding-left: ${props => props.theme.space[4]}px;\n  padding-right: ${props => props.theme.space[4]}px;\n`;\n","import styled from 'styled-components';\n\nexport const NoInfo = styled.p`\n  font-family: ${props => props.theme.fonts.heading};\n  font-weight: ${props => props.theme.fontWeights.heading};\n  font-size: ${props => props.theme.fontSizes.l};\n\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport image from 'images/no-image-icon.jpg';\nimport { List, Item, ActorName, Character } from 'components/ActorsList';\n\nconst ActorsList = ({ actorsInfo }) => {\n  return (\n    <List>\n      {actorsInfo.map(({ id, name, character, profile_path }) => {\n        return (\n          <Item key={id}>\n            <img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : image\n              }\n              alt={name}\n              width=\"150\"\n            />\n            <ActorName>{name}</ActorName>\n            <Character>{character}</Character>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nActorsList.propTypes = {\n  actorsInfo: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default ActorsList;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: ${props => props.theme.space[4]}px;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc((100% - 112px) / 7);\n\n  list-style: none;\n\n  img {\n    margin-bottom: ${props => props.theme.space[2]}px;\n\n    width: 100%;\n    height: 80%;\n  }\n`;\n\nexport const ActorName = styled.p`\n  font-family: ${props => props.theme.fonts.body};\n  font-weight: ${props => props.theme.fontWeights.heading};\n  font-size: ${props => props.theme.fontSizes.m};\n  margin-bottom: ${props => props.theme.space[2]}px; ;\n`;\n\nexport const Character = styled.p`\n  font-size: ${props => props.theme.fontSizes.s};\n  color: ${props => props.theme.colors.primaryText};\n`;\n","import { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ThreeDots } from 'react-loader-spinner';\nimport ActorsList from 'components/ActorsList';\nimport { fetchMovies } from 'services/fetchMovies';\nimport { Container } from 'components/Container';\nimport { NoInfo } from 'components/NoInfo/';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        if (isFirstRender.current) {\n          isFirstRender.current = false;\n          return;\n        }\n\n        setLoaded(true);\n\n        const dataActorsMovie = await fetchMovies(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=084c550b6f1767443109bcf4bcaee21b&language=en-US`\n        );\n\n        const dataCast = dataActorsMovie.cast;\n\n        setActors([...dataCast]);\n      } catch (error) {\n        console.log(error.message);\n        setError(error);\n      } finally {\n        setLoaded(false);\n      }\n    };\n\n    fetch();\n  }, [movieId]);\n\n  return (\n    <section>\n      <Container>\n        {actors.length > 1 ? (\n          <ActorsList actorsInfo={actors} />\n        ) : (\n          <NoInfo>\n            We don`t have information abaut actors for this movie.\n          </NoInfo>\n        )}\n\n        {error && <p>Something wrong. Try again later.</p>}\n\n        {loaded && (\n          <ThreeDots\n            height=\"80\"\n            width=\"80\"\n            radius=\"9\"\n            color=\"blue\"\n            ariaLabel=\"three-dots-loading\"\n            wrapperStyle={{ justifyContent: 'center' }}\n            visible={true}\n          />\n        )}\n      </Container>\n    </section>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nexport const fetchMovies = async url => {\n  const response = await axios.get(url);\n\n  return response.data;\n};\n"],"names":["Container","styled","props","theme","space","NoInfo","fonts","heading","fontWeights","fontSizes","l","actorsInfo","List","map","id","name","character","profile_path","Item","src","image","alt","width","ActorName","Character","body","m","s","colors","primaryText","useState","actors","setActors","loaded","setLoaded","error","setError","movieId","useParams","isFirstRender","useRef","useEffect","fetch","current","fetchMovies","dataActorsMovie","dataCast","cast","console","log","message","length","height","radius","color","ariaLabel","wrapperStyle","justifyContent","visible","url","axios","response","data"],"sourceRoot":""}