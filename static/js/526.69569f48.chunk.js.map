{"version":3,"file":"static/js/526.69569f48.chunk.js","mappings":"iRAsCA,EAnCmB,SAAC,GAAoB,IAAlBA,EAAiB,EAAjBA,WACpB,OACE,wBACGA,EAAWC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACtC,OACE,2BACE,gBACEC,IACED,EAAY,0CAC2BA,GACnCE,EAENC,IAAKL,EACLM,MAAM,SAER,uBAAIN,KACJ,uBAAIC,MAXGF,EAcZ,KAGN,E,SC0CD,EA7Da,WACX,OAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,GAAgBC,EAAAA,EAAAA,SAAO,GA8B7B,OA5BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,mGAENH,EAAcI,QAFR,uBAGRJ,EAAcI,SAAU,EAHhB,iCAOVT,GAAU,GAPA,UASoBU,EAAAA,EAAAA,GAAY,sCAAD,OACDP,EADC,qEAT/B,OASJQ,EATI,OAaJC,EAAWD,EAAgBE,KAEjCf,GAAU,OAAIc,IAfJ,kDAiBVE,QAAQC,IAAI,KAAMC,SAClBd,EAAS,EAAD,IAlBE,yBAoBVF,GAAU,GApBA,6EAAH,qDAwBXQ,GACD,GAAE,CAACL,KAGF,2BACGN,EAAOoB,OAAS,GACf,SAAC,EAAD,CAAY/B,WAAYW,KAExB,kFAGDI,IAAS,6DAETF,IACC,SAAC,KAAD,CACEmB,OAAO,KACPvB,MAAM,KACNwB,OAAO,IACPC,MAAM,OACNC,UAAU,qBACVC,aAAc,CAAEC,eAAgB,UAChCC,SAAS,MAKlB,C,8FC/DYd,EAAW,mCAAG,WAAMe,GAAN,uFACFC,EAAAA,EAAAA,IAAUD,GADR,cACnBE,EADmB,yBAGlBA,EAASC,MAHS,2CAAH,qD","sources":["components/ActorsList/ActorsList.jsx","pages/Cast/Cast.jsx","services/fetchMovies.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport image from 'images/no-image-icon.jpg';\n\nconst ActorsList = ({ actorsInfo }) => {\n  return (\n    <ul>\n      {actorsInfo.map(({ id, name, character, profile_path }) => {\n        return (\n          <li key={id}>\n            <img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : image\n              }\n              alt={name}\n              width=\"100\"\n            />\n            <p>{name}</p>\n            <p>{character}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nActorsList.propTypes = {\n  actorsInfo: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default ActorsList;\n","import { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ThreeDots } from 'react-loader-spinner';\nimport ActorsList from 'components/ActorsList';\nimport { fetchMovies } from 'services/fetchMovies';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        if (isFirstRender.current) {\n          isFirstRender.current = false;\n          return;\n        }\n\n        setLoaded(true);\n\n        const dataActorsMovie = await fetchMovies(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=084c550b6f1767443109bcf4bcaee21b&language=en-US`\n        );\n\n        const dataCast = dataActorsMovie.cast;\n\n        setActors([...dataCast]);\n      } catch (error) {\n        console.log(error.message);\n        setError(error);\n      } finally {\n        setLoaded(false);\n      }\n    };\n\n    fetch();\n  }, [movieId]);\n\n  return (\n    <div>\n      {actors.length > 1 ? (\n        <ActorsList actorsInfo={actors} />\n      ) : (\n        <p>We don`t have information abaut actors for this movie.</p>\n      )}\n\n      {error && <p>Something wrong. Try again later.</p>}\n\n      {loaded && (\n        <ThreeDots\n          height=\"80\"\n          width=\"80\"\n          radius=\"9\"\n          color=\"blue\"\n          ariaLabel=\"three-dots-loading\"\n          wrapperStyle={{ justifyContent: 'center' }}\n          visible={true}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nexport const fetchMovies = async url => {\n  const response = await axios.get(url);\n\n  return response.data;\n};\n"],"names":["actorsInfo","map","id","name","character","profile_path","src","image","alt","width","useState","actors","setActors","loaded","setLoaded","error","setError","movieId","useParams","isFirstRender","useRef","useEffect","fetch","current","fetchMovies","dataActorsMovie","dataCast","cast","console","log","message","length","height","radius","color","ariaLabel","wrapperStyle","justifyContent","visible","url","axios","response","data"],"sourceRoot":""}