{"version":3,"file":"static/js/593.9c133457.chunk.js","mappings":"+PAAaA,EAA2B,SAAAC,GACtC,IAAMC,EAAaD,EAAYE,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAExC,OAA0B,IAAtBH,EAAWI,OACN,QAGLJ,EAAWI,OAAS,EAChB,GAAN,OAAUJ,EAAW,GAArB,aAA4BA,EAAW,GAAvC,cAGKA,EAAWK,KAAK,KACxB,E,2BCyED,EA9EkB,SAAC,GAUZ,IAAD,ICjBkBC,ECAGC,EFiBrB,IATJC,MACEC,EAQE,EARFA,MACAC,EAOE,EAPFA,YAOE,IANFC,aAAAA,OAME,MANa,KAMb,MALFC,aAAAA,OAKE,MALa,KAKb,EAJFC,EAIE,EAJFA,SACAC,EAGE,EAHFA,OAEFC,EACI,EADJA,UAEMC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,iCACE,4BACE,SAAC,KAAD,CAAMC,GAAE,oBAAEF,EAASG,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,IAAlC,UAEE,0BACE,wCAGJ,0BACE,gBACEC,IACEX,EAAW,0CAC4BA,GACnCY,EAENC,IAAKd,EACLe,MAAM,WAGV,4BACE,uBACGb,EAAY,UAAMF,EAAN,cE1CEF,EF0C0BI,EE1ClB,IAAIc,KAAKlB,GAAMmB,eF0CzB,KAA+CjB,KAE9D,uBACGG,EAAY,uBC7CDN,ED8CgBM,EC9Ca,GAApBe,KAAKC,MAAMtB,ID6CnB,MAET,0BAEN,qCACA,uBAAIO,GAAsB,iBAC1B,mCACA,uBAAIE,EAAUD,YAGlB,4BACE,mDACA,2BACE,yBACE,SAAC,KAAD,CAASI,GAAG,OAAZ,qBAEF,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,8BAIN,SAAC,EAAAW,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,EGVD,EAtDqB,WACnB,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOvB,EAAP,KAAcwB,EAAd,KACA,GAA4BD,EAAAA,EAAAA,WAAS,GAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAyBR,OAxBAE,QAAQC,IAAIH,GACZE,QAAQC,IAAIhC,IAEZiC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,oGAEVR,GAAU,GAFA,UAIcS,EAAAA,EAAAA,GAAY,sCAAD,OACKN,EADL,0DAJzB,OAIJO,EAJI,OAOVL,QAAQC,IAAII,GACZZ,EAASY,GARC,gDAUVL,QAAQC,IAAI,KAAMK,SAClBT,EAAS,EAAD,IAXE,yBAaVF,GAAU,GAbA,4EAAH,qDAiBXQ,GACD,GAAE,CAACL,KAGF,4BACG7B,IACC,0BACE,SAAC,EAAD,CAAWA,MAAOA,EAAOO,UAAWjB,MAIvCqC,IAAS,6DAETF,IACC,SAAC,KAAD,CACEa,OAAO,KACPtB,MAAM,KACNuB,OAAO,IACPC,MAAM,OACNC,UAAU,qBACVC,aAAc,CAAEC,eAAgB,UAChCC,SAAS,MAKlB,C,8FCzDYT,EAAW,mCAAG,WAAMU,GAAN,uFACFC,EAAAA,EAAAA,IAAUD,GADR,cACnBE,EADmB,yBAGlBA,EAASC,MAHS,2CAAH,qD","sources":["services/getGenresForDetailsMovie.js","components/CardMovie/CardMovie.jsx","services/getScore.js","services/getDateYear.js","pages/MovieDetails/MovieDetails.jsx","services/fetchMovies.js"],"sourcesContent":["export const getGenresForDetailsMovie = genresMovie => {\n  const nameGenres = genresMovie.map(genre => genre.name);\n\n  if (nameGenres.length === 0) {\n    return 'Other';\n  }\n\n  if (nameGenres.length > 3) {\n    return `${nameGenres[0]}, ${nameGenres[1]}, 'Others'`;\n  }\n\n  return nameGenres.join(', ');\n};\n","import { Suspense } from 'react';\nimport { Link, NavLink, Outlet, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport image from 'images/no-image-icon.jpg';\nimport { getDateYear } from 'services/getDateYear';\nimport { getScore } from 'services/getScore';\n\nconst CardMovie = ({\n  movie: {\n    title,\n    poster_path,\n    release_date = null,\n    vote_average = null,\n    overview,\n    genres,\n  },\n  getGenres,\n}) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <div>\n        <Link to={location.state?.from ?? '/'}>\n          {/* <NavLink to={location.state?.from ?? \"/\"}>  вказувати альтернативний варіант шляху*/}\n          <div>\n            <p>Go back</p>\n          </div>\n        </Link>\n        <div>\n          <img\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                : image\n            }\n            alt={title}\n            width=\"300\"\n          />\n        </div>\n        <div>\n          <p>\n            {release_date ? `${title} (${getDateYear(release_date)})` : title}\n          </p>\n          <p>\n            {vote_average\n              ? `User Score: ${getScore(vote_average)}% `\n              : 'User Score: no score'}\n          </p>\n          <p>Overview</p>\n          <p>{overview ? overview : 'No overview'}</p>\n          <p>Genres</p>\n          <p>{getGenres(genres)}</p>\n        </div>\n      </div>\n      <div>\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <NavLink to=\"cast\">Cast</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"reviews\">Reviews</NavLink>\n          </li>\n        </ul>\n      </div>\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nCardMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    release_date: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.array.isRequired,\n  }).isRequired,\n  getGenres: PropTypes.func.isRequired,\n};\n\nexport default CardMovie;\n","export const getScore = value => Math.round(value) * 10;\n","export const getDateYear = date => new Date(date).getFullYear();\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { fetchMovies } from 'services/fetchMovies';\nimport { getGenresForDetailsMovie } from 'services/getGenresForDetailsMovie';\nimport CardMovie from 'components/CardMovie';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  console.log(movieId);\n  console.log(movie);\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoaded(true);\n\n        const dataMovie = await fetchMovies(\n          `https://api.themoviedb.org/3/movie/${movieId}?api_key=084c550b6f1767443109bcf4bcaee21b&language=en`\n        );\n        console.log(dataMovie);\n        setMovie(dataMovie);\n      } catch (error) {\n        console.log(error.message);\n        setError(error);\n      } finally {\n        setLoaded(false);\n      }\n    };\n\n    fetch();\n  }, [movieId]);\n\n  return (\n    <main>\n      {movie && (\n        <div>\n          <CardMovie movie={movie} getGenres={getGenresForDetailsMovie} />\n        </div>\n      )}\n\n      {error && <p>Something wrong. Try again later.</p>}\n\n      {loaded && (\n        <ThreeDots\n          height=\"80\"\n          width=\"80\"\n          radius=\"9\"\n          color=\"blue\"\n          ariaLabel=\"three-dots-loading\"\n          wrapperStyle={{ justifyContent: 'center' }}\n          visible={true}\n        />\n      )}\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nexport const fetchMovies = async url => {\n  const response = await axios.get(url);\n\n  return response.data;\n};\n"],"names":["getGenresForDetailsMovie","genresMovie","nameGenres","map","genre","name","length","join","value","date","movie","title","poster_path","release_date","vote_average","overview","genres","getGenres","location","useLocation","to","state","from","src","image","alt","width","Date","getFullYear","Math","round","Suspense","fallback","useState","setMovie","loaded","setLoaded","error","setError","movieId","useParams","console","log","useEffect","fetch","fetchMovies","dataMovie","message","height","radius","color","ariaLabel","wrapperStyle","justifyContent","visible","url","axios","response","data"],"sourceRoot":""}